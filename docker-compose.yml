
services:
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules/:/etc/prometheus/rules/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--storage.tsdb.retention.time=30d'
    security_opt:
      - no-new-privileges:true
    networks:
      - observability

  # Grafana - Visualization
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=GrafanaSecure123!Change@Me
      - GF_SECURITY_SECRET_KEY=GrafanaSecret123!Change@Me
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_SECURITY_COOKIE_SAMESITE=lax
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
      - GF_DATABASE_TYPE=sqlite3
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
      - GF_PATHS_DATA=/var/lib/grafana
      - GF_PATHS_LOGS=/var/log/grafana
      - TZ=UTC
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning:/etc/grafana/provisioning
    user: "472:472"
    security_opt:
      - no-new-privileges:true
    depends_on:
      - prometheus
    networks:
      - observability

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
    environment:
      - TZ=UTC
    security_opt:
      - no-new-privileges:true
    networks:
      - observability

  # Promtail - Log Collector
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log
      - ./promtail:/etc/promtail
    command: -config.file=/etc/promtail/promtail-config.yaml
    security_opt:
      - no-new-privileges:true
    depends_on:
      - loki
    networks:
      - observability

  # Tempo - Distributed Tracing
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    restart: unless-stopped
    ports:
      - "3200:3200"   # Tempo HTTP
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "9411:9411"   # Zipkin
      - "14268:14268" # Jaeger ingest
    command: -config.file=/etc/tempo/tempo.yaml
    volumes:
      - ./tempo/tempo.yaml:/etc/tempo/tempo.yaml
      - tempo_data:/var/tempo
    environment:
      - TZ=UTC
    security_opt:
      - no-new-privileges:true
    networks:
      - observability

  payment-api_instrumented:
    build:
      context: ./payment-api-instrumented
      dockerfile: Dockerfile
    container_name: payment-api_instrumented
    restart: unless-stopped
    ports:
      - "8888:8888"
    environment:
      # Application Configuration
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8888
      
      # OpenTelemetry Configuration
      - OpenTelemetry__OtlpEndpoint=http://tempo:4317
      - DOTNET_SYSTEM_NET_HTTP_SOCKETSHTTPHANDLER_HTTP2UNENCRYPTEDSUPPORT=true
      
      # Observability Metadata
      - SERVICE_NAME=payment-api-instrumented
      - SERVICE_VERSION=1.0.0
      - SERVICE_NAMESPACE=ebanking.observability
      - SERVICE_PURPOSE=observability-testing
      - DEPLOYMENT_ENVIRONMENT=production
      - DEPLOYMENT_REGION=on-premise
      - CLUSTER_NAME=observability-stack
      
      # Container/Host Information
      - CONTAINER_RUNTIME=docker
      - ORCHESTRATOR=docker-compose
    security_opt:
      - no-new-privileges:true
    networks:
      - observability
    depends_on:
      - tempo
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # eBanking Metrics Exporter
  ebanking_metrics_exporter:
    build: ./ebanking-exporter
    container_name: ebanking_metrics_exporter
    restart: unless-stopped
    ports:
      - "9201:9200"  # Changed from 9200 to 9201 to avoid conflict
    security_opt:
      - no-new-privileges:true
    networks:
      - observability

  # Node Exporter
  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: unless-stopped
    command:
      - '--path.rootfs=/host'
    pid: host
    volumes:
      - '/:/host:ro,rslave'
    security_opt:
      - no-new-privileges:true
    networks:
      - observability

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    security_opt:
      - no-new-privileges:true
    networks:
      - observability

  # PostgreSQL (for Grafana)
  postgres:
    image: postgres:13-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-grafana}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-grafana}
      - POSTGRES_DB=${POSTGRES_DB:-grafana}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    security_opt:
      - no-new-privileges:true
    networks:
      - observability

  # MinIO for file storage
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-MinioSecure123!Change@Me}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    security_opt:
      - no-new-privileges:true
    networks:
      - observability

  # InfluxDB - Time Series Database
  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USER}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_RETENTION=${INFLUXDB_RETENTION}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
      # Additional env vars for init script
      - INFLUXDB_USER=${INFLUXDB_USER}
      - INFLUXDB_PASSWORD=${INFLUXDB_PASSWORD}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - TZ=UTC
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - ./influxdb/config:/root/.influxdbv2    # ✅ Persistance du profil CLI
      - ./influxdb/data:/var/lib/influxdb2    # ✅ Persistance des données
      - ./influxdb/logs:/var/log/influxdb    # ✅ Persistance des logs
      - ./influxdb/backup:/backup    # ✅ Persistance des sauvegardes
      - ./influxdb/keys:/root/.influxdbv2/keys    # ✅ Persistance des clés
      - ./influxdb/init-influxdb.sh:/docker-entrypoint-initdb.d/init-influxdb.sh
      
    networks:
      - observability
      
  # Payment API Service
  payment-api:
    build: 
      context: ./payment-api-mock
      dockerfile: Dockerfile
    container_name: payment-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - SIMULATION_RATE=5
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN:-my-super-secret-auth-token}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-myorg}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-payments}
    depends_on:
      - influxdb
      - prometheus
    networks:
      - observability
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-MySQLRoot123!Change@Me}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-observability}
      - MYSQL_USER=${MYSQL_USER:-appuser}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-MySQLApp123!Change@Me}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/initdb.d:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      timeout: 5s
      retries: 10
    networks:
      - observability

  # Grafana MCP (Metrics Collection Proxy)
  grafana-mcp:
    image: mcp/grafana:latest
    container_name: grafana-mcp
    restart: unless-stopped
    ports:
      - "8081:8000"
    environment:
      - GRAFANA_URL=http://grafana:3000
      - GRAFANA_SERVICE_ACCOUNT_TOKEN=${GRAFANA_SERVICE_ACCOUNT_TOKEN}
    command: -t streamable-http -address :8000
    networks:
      - observability

  # MS SQL Server - E-Banking Financial Data
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql_ebanking
    restart: unless-stopped
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD:-EBanking@Secure123!}
      - MSSQL_PID=Developer
      - MSSQL_AGENT_ENABLED=true
      - MSSQL_COLLATION=SQL_Latin1_General_CP1_CI_AS
      - TZ=UTC
    volumes:
      - mssql_data:/var/opt/mssql
      - ./mssql/init:/docker-entrypoint-initdb.d
      - ./mssql/scripts:/scripts
      - ./mssql/backup:/backup
    entrypoint: ["/bin/bash", "/scripts/entrypoint.sh"]
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P $${MSSQL_SA_PASSWORD} -C -Q 'SELECT 1' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    networks:
      - observability

networks:
  observability:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  loki_data:
  tempo_data:
  alertmanager_data:
  postgres_data:
  minio_data:
  influxdb_data:
  mysql_data:
  mssql_data:
